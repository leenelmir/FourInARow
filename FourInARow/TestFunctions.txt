
PHASE 1 SPECS AND TEST CASES

// METHOD 1 : void resetName(char* name) //

REQUIRES:
char array name is of length 21

EFFECTS:
resets all values of char array to '-'.

TEST CASES:
a - resetName("\0\0\0...") : returns "-...---"
b - resetName("---...---") : returns "-...---"
Similarly, all cases return same array

// METHOD 2: bool checkEmptyScanner(char* name)

REQUIRES:
char array name is of length 21 

EFFECTS:
checks whether scanner is empty, if it is, it removes /n. If user wrote 35 chars,
the method will collect the remaining 15 (max 20 chars) so next time we scan we have an empty scanner

TEST CASES:
a- checkEmptyScanner(test) : false
b- checkEmptyScanner(yesjfvbwrksgjgiwsbjfilwrkgklg) : true



2- checkEmptyScanner SARA

// METHOD 3: bool checkSpace (char* name) //

REQUIRES: 
char array name is of length 21

EFFECTS: 
checks whether required name is valid (has no spaces), returns true if name has no spaces 
and false otherwise

TEST CASES: 
a- checkSpace(sara) : returns true
b- checkSpace(sa ra): returns false
c- checkSpace() : returns false
d- checkSpace(s): returns true
e- checkSpace(=): returns true since '=' is a char 

// METHOD 4: bool checkValidMove(int tempColumn, int* row) //

REQUIRES:
tempColumn is zero-indexed and is exactly one digit long

EFFECTS:
checks whether requested column insertion is valid; returns true if insertion
is valid and false otherwise

TEST CASES: (NOTE: checkValidMove is only called with int row[6])
a- checkValidMove(a, row) : false for all  a < 0 || a > 6
b- checkValidMove(b, row) but row[b] full (row[b]>5) : false for all 0 <= b <= 6
c- checkValidMove(c, row) but row[c] available (row[b]<=5) : true for all 0 <= c <= 6
d- row[b] < 0 : this is an impossible case since row[b] will always be incremented (by the code's logic)


5- printBoard AHMAD

6- checkWin KARIM
